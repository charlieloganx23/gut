import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from io import BytesIO

st.set_page_config(
    page_title="Matriz GUT - Oficina Tribunal de Justi√ßa",
    page_icon="‚öñÔ∏è",
    layout="wide"
)

# CSS customizado para deixar mais profissional
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1e3a8a 0%, #3b82f6 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .priority-high {
        background-color: #fee2e2;
        border-left: 5px solid #dc2626;
        padding: 1rem;
        border-radius: 5px;
        margin: 0.5rem 0;
    }
    .priority-medium {
        background-color: #fef3c7;
        border-left: 5px solid #f59e0b;
        padding: 1rem;
        border-radius: 5px;
        margin: 0.5rem 0;
    }
    .priority-low {
        background-color: #dcfce7;
        border-left: 5px solid #16a34a;
        padding: 1rem;
        border-radius: 5px;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

st.markdown("""
<div class="main-header">
    <h1>‚öñÔ∏è Matriz GUT - Oficina de Prioriza√ß√£o</h1>
    <h3>Tribunal de Justi√ßa - Ferramenta de Gest√£o Estrat√©gica</h3>
</div>
""", unsafe_allow_html=True)

st.markdown("""
**Bem-vindos √† Oficina de Prioriza√ß√£o com a Matriz GUT**  
Aplicaremos esta ferramenta para organizar e priorizar problemas de forma **t√©cnica e objetiva**, 
auxiliando a tomada de decis√£o estrat√©gica no contexto do **Poder Judici√°rio**.
""")

# Dicion√°rios para mapear pontua√ß√µes para descri√ß√µes
gravidade_map = {
    1: "1 - Nenhuma gravidade",
    2: "2 - Pouco grave", 
    3: "3 - Grave",
    4: "4 - Muito grave",
    5: "5 - Extremamente grave"
}

urgencia_map = {
    1: "1 - Pode esperar",
    2: "2 - Pouco urgente",
    3: "3 - Urgente", 
    4: "4 - Muito urgente",
    5: "5 - Com prazo imediato"
}

tendencia_map = {
    1: "1 - N√£o vai piorar",
    2: "2 - Vai piorar a longo prazo",
    3: "3 - Vai piorar a m√©dio prazo",
    4: "4 - Vai piorar a curto prazo", 
    5: "5 - Vai piorar drasticamente"
}

# Estado inicial
if 'problemas' not in st.session_state:
    st.session_state.problemas = []

def adicionar_problema(nome, gravidade, urgencia, tendencia):
    pontuacao_gut = gravidade * urgencia * tendencia
    st.session_state.problemas.append({
        "Problema": nome,
        "Gravidade": gravidade,
        "Urg√™ncia": urgencia, 
        "Tend√™ncia": tendencia,
        "Pontua√ß√£o GUT": pontuacao_gut
    })

def remover_problema(indice):
    if 0 <= indice < len(st.session_state.problemas):
        st.session_state.problemas.pop(indice)

def classificar_prioridade(pontuacao):
    if pontuacao >= 64:  # 4*4*4 ou superior
        return "üî¥ ALTA", "priority-high"
    elif pontuacao >= 27:  # 3*3*3 ou superior  
        return "üü° M√âDIA", "priority-medium"
    else:
        return "üü¢ BAIXA", "priority-low"

# Bot√£o para carregar exemplos do judici√°rio
if st.button("üìã Carregar Exemplos do Judici√°rio"):
    exemplos = [
        {"nome": "Atraso na an√°lise de processos urgentes", "g": 4, "u": 5, "t": 4},
        {"nome": "Sistema de peticionamento eletr√¥nico inst√°vel", "g": 5, "u": 4, "t": 5},
        {"nome": "Falta de capacita√ß√£o em nova legisla√ß√£o", "g": 3, "u": 2, "t": 3},
        {"nome": "Ac√∫mulo de processos em cart√≥rio", "g": 4, "u": 3, "t": 4},
        {"nome": "Equipamentos de TI desatualizados", "g": 3, "u": 2, "t": 4}
    ]
    
    st.session_state.problemas = []
    for ex in exemplos:
        adicionar_problema(ex["nome"], ex["g"], ex["u"], ex["t"])
    st.success("‚úÖ Exemplos carregados com sucesso!")
    st.rerun()

# Layout dividido: formul√°rio ao lado dos problemas
col1, col2 = st.columns([1, 2])

with col1:
    with st.form("novo_problema_form"):
        st.subheader("‚ûï Adicionar Novo Problema")
        nome_problema = st.text_input("üìù Nome do Problema")
        
        col_g, col_u, col_t = st.columns(3)
        with col_g:
            gravidade = st.slider("‚ö†Ô∏è Gravidade", 1, 5, 3)
        with col_u:
            urgencia = st.slider("‚è≥ Urg√™ncia", 1, 5, 3)
        with col_t:
            tendencia = st.slider("üìà Tend√™ncia", 1, 5, 3)

        # Preview da pontua√ß√£o
        preview_pontuacao = gravidade * urgencia * tendencia
        prioridade_preview, _ = classificar_prioridade(preview_pontuacao)
        
        st.info(f"**Pontua√ß√£o GUT**: {preview_pontuacao} | **Prioridade**: {prioridade_preview}")
        
        with st.expander("‚ÑπÔ∏è Ver descri√ß√µes dos crit√©rios"):
            st.write(f"**Gravidade**: {gravidade_map[gravidade]}")
            st.write(f"**Urg√™ncia**: {urgencia_map[urgencia]}")
            st.write(f"**Tend√™ncia**: {tendencia_map[tendencia]}")

        submitted = st.form_submit_button("Adicionar Problema", type="primary")
        if submitted and nome_problema.strip():
            adicionar_problema(nome_problema.strip(), gravidade, urgencia, tendencia)
            st.success(f"‚úÖ Problema **{nome_problema}** adicionado!")
            st.rerun()
        elif submitted:
            st.error("‚ùå Insira um nome v√°lido para o problema.")

    # Bot√£o para limpar todos os problemas
    if st.session_state.problemas:
        if st.button("üóëÔ∏è Limpar Todos os Problemas", type="secondary"):
            st.session_state.problemas = []
            st.success("‚úÖ Todos os problemas foram removidos!")
            st.rerun()

with col2:
    if st.session_state.problemas:
        st.subheader("üìã Problemas Priorizados")
        df = pd.DataFrame(st.session_state.problemas)
        df_sorted = df.sort_values(by="Pontua√ß√£o GUT", ascending=False).reset_index(drop=True)
        
        # Adicionar classifica√ß√£o de prioridade
        df_sorted["Prioridade"] = df_sorted["Pontua√ß√£o GUT"].apply(lambda x: classificar_prioridade(x)[0])
        
        # Exibir tabela com formata√ß√£o
        st.dataframe(
            df_sorted[["Problema", "Gravidade", "Urg√™ncia", "Tend√™ncia", "Pontua√ß√£o GUT", "Prioridade"]], 
            use_container_width=True,
            hide_index=True
        )

        # Se√ß√£o de remo√ß√£o de problemas
        with st.expander("üóëÔ∏è Remover Problemas"):
            for i, row in df_sorted.iterrows():
                col_info, col_btn = st.columns([3, 1])
                with col_info:
                    st.write(f"**{row['Problema']}** - GUT: {row['Pontua√ß√£o GUT']}")
                with col_btn:
                    if st.button("‚ùå", key=f"del_{i}", help=f"Remover: {row['Problema']}"):
                        # Encontrar o √≠ndice original no array n√£o ordenado
                        original_index = next(
                            idx for idx, prob in enumerate(st.session_state.problemas) 
                            if prob["Problema"] == row["Problema"]
                        )
                        remover_problema(original_index)
                        st.rerun()

        # An√°lise de prioridades
        st.subheader("üéØ An√°lise de Prioridades")
        
        alta_prioridade = df_sorted[df_sorted["Pontua√ß√£o GUT"] >= 64]
        media_prioridade = df_sorted[(df_sorted["Pontua√ß√£o GUT"] >= 27) & (df_sorted["Pontua√ß√£o GUT"] < 64)]
        baixa_prioridade = df_sorted[df_sorted["Pontua√ß√£o GUT"] < 27]
        
        col_alta, col_media, col_baixa = st.columns(3)
        
        with col_alta:
            st.metric("üî¥ Alta Prioridade", len(alta_prioridade))
        with col_media:
            st.metric("üü° M√©dia Prioridade", len(media_prioridade))
        with col_baixa:
            st.metric("üü¢ Baixa Prioridade", len(baixa_prioridade))

        # Gr√°ficos interativos
        st.subheader("üìä Visualiza√ß√µes")
        
        tab1, tab2, tab3 = st.tabs(["üìä Ranking", "üéØ Radar", "üìà Distribui√ß√£o"])
        
        with tab1:
            fig_bar = px.bar(
                df_sorted,
                x="Pontua√ß√£o GUT",
                y="Problema",
                orientation="h",
                color="Pontua√ß√£o GUT",
                color_continuous_scale="RdYlGn_r",
                title="Ranking de Problemas por Pontua√ß√£o GUT"
            )
            fig_bar.update_layout(height=400)
            st.plotly_chart(fig_bar, use_container_width=True)
        
        with tab2:
            if len(df_sorted) <= 5:  # Limitar radar para n√£o ficar confuso
                fig_radar = go.Figure()
                
                for _, row in df_sorted.iterrows():
                    fig_radar.add_trace(go.Scatterpolar(
                        r=[row["Gravidade"], row["Urg√™ncia"], row["Tend√™ncia"]],
                        theta=["Gravidade", "Urg√™ncia", "Tend√™ncia"],
                        fill='toself',
                        name=row["Problema"][:20] + "..." if len(row["Problema"]) > 20 else row["Problema"]
                    ))
                
                fig_radar.update_layout(
                    polar=dict(radialaxis=dict(visible=True, range=[0, 5])),
                    title="Compara√ß√£o G-U-T por Problema"
                )
                st.plotly_chart(fig_radar, use_container_width=True)
            else:
                st.info("üìù Gr√°fico radar dispon√≠vel para at√© 5 problemas. Remova alguns para visualizar.")
        
        with tab3:
            fig_hist = px.histogram(
                df_sorted,
                x="Pontua√ß√£o GUT",
                nbins=10,
                title="Distribui√ß√£o das Pontua√ß√µes GUT"
            )
            st.plotly_chart(fig_hist, use_container_width=True)

        # Exporta√ß√£o melhorada
        st.subheader("üì• Exportar Resultados")
        
        col_csv, col_excel = st.columns(2)
        
        with col_csv:
            csv = df_sorted.to_csv(index=False).encode('utf-8')
            st.download_button(
                "‚¨áÔ∏è Baixar CSV",
                data=csv,
                file_name=f"matriz_gut_tribunal_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.csv",
                mime="text/csv"
            )
        
        with col_excel:
            # Criar Excel em mem√≥ria
            output = BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df_sorted.to_excel(writer, sheet_name='Matriz GUT', index=False)
            
            st.download_button(
                "‚¨áÔ∏è Baixar Excel",
                data=output.getvalue(),
                file_name=f"matriz_gut_tribunal_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

        # Conclus√£o destacada
        st.markdown("---")
        st.subheader("üîç Conclus√µes da An√°lise")
        
        if not df_sorted.empty:
            top_problema = df_sorted.iloc[0]
            prioridade_top, classe_css = classificar_prioridade(top_problema["Pontua√ß√£o GUT"])
            
            st.markdown(f"""
            <div class="{classe_css}">
                <h4>üéØ Problema Priorit√°rio</h4>
                <p><strong>{top_problema['Problema']}</strong></p>
                <p>Pontua√ß√£o GUT: <strong>{top_problema['Pontua√ß√£o GUT']}</strong> | Prioridade: <strong>{prioridade_top}</strong></p>
                <p>G: {top_problema['Gravidade']} | U: {top_problema['Urg√™ncia']} | T: {top_problema['Tend√™ncia']}</p>
            </div>
            """, unsafe_allow_html=True)
            
            if len(alta_prioridade) > 0:
                st.warning(f"‚ö†Ô∏è **{len(alta_prioridade)} problema(s)** requer(em) aten√ß√£o imediata (Alta Prioridade)")
            
            if len(media_prioridade) > 0:
                st.info(f"üìã **{len(media_prioridade)} problema(s)** deve(m) ser planejado(s) (M√©dia Prioridade)")

    else:
        st.info("üìù Nenhum problema cadastrado ainda. Adicione problemas no painel ao lado ou carregue os exemplos do judici√°rio.")
        
        # Explica√ß√£o da metodologia quando n√£o h√° dados
        with st.expander("üìö Como funciona a Matriz GUT?"):
            st.markdown("""
            ### Crit√©rios de Avalia√ß√£o:
            
            **‚ö†Ô∏è Gravidade (G)**: Impacto do problema se n√£o for resolvido
            - 1: Nenhuma gravidade
            - 2: Pouco grave  
            - 3: Grave
            - 4: Muito grave
            - 5: Extremamente grave
            
            **‚è≥ Urg√™ncia (U)**: Tempo dispon√≠vel para resolver
            - 1: Pode esperar
            - 2: Pouco urgente
            - 3: Urgente
            - 4: Muito urgente  
            - 5: Com prazo imediato
            
            **üìà Tend√™ncia (T)**: Probabilidade de piorar
            - 1: N√£o vai piorar
            - 2: Vai piorar a longo prazo
            - 3: Vai piorar a m√©dio prazo
            - 4: Vai piorar a curto prazo
            - 5: Vai piorar drasticamente
            
            ### C√°lculo:
            **Pontua√ß√£o GUT = G √ó U √ó T**
            
            ### Classifica√ß√£o de Prioridades:
            - üî¥ **Alta**: ‚â• 64 pontos
            - üü° **M√©dia**: 27-63 pontos  
            - üü¢ **Baixa**: < 27 pontos
            """)