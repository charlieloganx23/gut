import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(
    page_title="Matriz GUT - Oficina Tribunal de Justi√ßa",
    page_icon="‚öñÔ∏è",
    layout="wide"
)

st.title("‚öñÔ∏è Matriz GUT - Oficina de Prioriza√ß√£o de Problemas")
st.markdown("""
Bem-vindos √† **Oficina de Prioriza√ß√£o com a Matriz GUT**.  
Aqui aplicaremos a ferramenta para organizar e priorizar problemas de forma **t√©cnica e objetiva**, 
auxiliando a tomada de decis√£o no contexto do **Poder Judici√°rio**.  
""")

# Dicion√°rios para mapear pontua√ß√µes para descri√ß√µes
gravidade_map = {
    1: "1 - Nenhuma gravidade",
    2: "2 - Pouco grave",
    3: "3 - Grave",
    4: "4 - Muito grave",
    5: "5 - Extremamente grave"
}

urgencia_map = {
    1: "1 - Pode esperar",
    2: "2 - Pouco urgente",
    3: "3 - Urgente",
    4: "4 - Muito urgente",
    5: "5 - Com prazo imediato"
}

tendencia_map = {
    1: "1 - N√£o vai piorar",
    2: "2 - Vai piorar a longo prazo",
    3: "3 - Vai piorar a m√©dio prazo",
    4: "4 - Vai piorar a curto prazo",
    5: "5 - Vai piorar drasticamente"
}

# Estado inicial
if 'problemas' not in st.session_state:
    st.session_state.problemas = []

def adicionar_problema(nome, gravidade, urgencia, tendencia):
    pontuacao_gut = gravidade * urgencia * tendencia
    st.session_state.problemas.append({
        "Problema": nome,
        "Gravidade": gravidade,
        "Urg√™ncia": urgencia,
        "Tend√™ncia": tendencia,
        "Pontua√ß√£o GUT": pontuacao_gut
    })

def remover_problema(indice):
    st.session_state.problemas.pop(indice)

# Layout dividido: formul√°rio ao lado dos problemas
col1, col2 = st.columns([1, 2])

with col1:
    with st.form("novo_problema_form"):
        st.subheader("‚ûï Adicionar Novo Problema")
        nome_problema = st.text_input("üìù Nome do Problema")
        gravidade = st.slider("‚ö†Ô∏è Gravidade", 1, 5, 3)
        urgencia = st.slider("‚è≥ Urg√™ncia", 1, 5, 3)
        tendencia = st.slider("üìà Tend√™ncia", 1, 5, 3)

        st.write(f"**Gravidade**: {gravidade_map[gravidade]}")
        st.write(f"**Urg√™ncia**: {urgencia_map[urgencia]}")
        st.write(f"**Tend√™ncia**: {tendencia_map[tendencia]}")

        submitted = st.form_submit_button("Adicionar Problema")
        if submitted and nome_problema.strip():
            adicionar_problema(nome_problema.strip(), gravidade, urgencia, tendencia)
            st.success(f"Problema **{nome_problema}** adicionado!")
        elif submitted:
            st.error("Insira um nome v√°lido para o problema.")

with col2:
    if st.session_state.problemas:
        st.subheader("üìã Lista de Problemas")
        df = pd.DataFrame(st.session_state.problemas)
        df_sorted = df.sort_values(by="Pontua√ß√£o GUT", ascending=False).reset_index(drop=True)

        st.dataframe(df_sorted, use_container_width=True)

        # Bot√µes para remover problemas
        for i, problema in enumerate(df_sorted["Problema"]):
            if st.button(f"‚ùå Remover: {problema}", key=f"del_{i}"):
                remover_problema(i)
                st.experimental_rerun()

        # Gr√°ficos interativos
        st.subheader("üìä Visualiza√ß√£o das Prioridades")
        fig = px.bar(
            df_sorted,
            x="Problema",
            y="Pontua√ß√£o GUT",
            color="Pontua√ß√£o GUT",
            color_continuous_scale="Reds",
            title="Ranking de Problemas por Pontua√ß√£o GUT"
        )
        st.plotly_chart(fig, use_container_width=True)

        radar_fig = px.line_polar(
            df_sorted.melt(id_vars="Problema", value_vars=["Gravidade", "Urg√™ncia", "Tend√™ncia"]),
            r="value",
            theta="variable",
            color="Problema",
            line_close=True,
            title="Vis√£o Radar - Compara√ß√£o G, U, T"
        )
        st.plotly_chart(radar_fig, use_container_width=True)

        # Exporta√ß√£o
        st.subheader("üì• Exportar Resultados")
        csv = df_sorted.to_csv(index=False).encode('utf-8')
        st.download_button("‚¨áÔ∏è Baixar CSV", data=csv, file_name="matriz_gut.csv", mime="text/csv")

        excel = df_sorted.to_excel("matriz_gut.xlsx", index=False)
        with open("matriz_gut.xlsx", "rb") as f:
            st.download_button("‚¨áÔ∏è Baixar Excel", data=f, file_name="matriz_gut.xlsx", mime="application/vnd.ms-excel")

        # Destaque da conclus√£o
        st.markdown("### üîé Conclus√£o")
        top_problema = df_sorted.loc[0, "Problema"]
        st.success(f"O problema priorit√°rio identificado √©: **{top_problema}** üéØ")

    else:
        st.info("Nenhum problema cadastrado ainda. Adicione um no painel ao lado.")